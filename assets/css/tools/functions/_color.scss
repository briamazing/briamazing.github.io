$__alpha-stops: (0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1);

@function grayscale($gradation, $alpha: 1) {
    @if map-has-key($pro-grayscale, $gradation) {
        $alpha-val: $alpha;

        @if index($__alpha-stops, $alpha-val) == null {
            @error "Only alpha values in 0.1 increments are allowed";
        }

        $grayscale-val: map-get($pro-grayscale, $gradation);
        @return rgba($grayscale-val, $alpha-val);
    } @else {
        @warn "No gradation of #{$gradation} found in $DBgrayscaleColors map.";
    }
}

@function color($name, $shade:0, $alpha:1) {
$rgb: ();
    @if ($shade == -9) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  75%) }
    @if ($shade == -8) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  70%) }
    @if ($shade == -7) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  65%) }
    @if ($shade == -6) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  60%) }
    @if ($shade == -5) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  50%) }
    @if ($shade == -4) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  40%) }
    @if ($shade == -3) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  30%) }
    @if ($shade == -2) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  20%) }
    @if ($shade == -1) { $rgb: mix($pro-hue-base-start, map-get($pro-hue, $name),  10%) }
    @if ($shade == 0) { $rgb: map-get($pro-hue, $name) }
    @if ($shade == 1)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   10%) }
    @if ($shade == 2)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   20%) }
    @if ($shade == 3)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   30%) }
    @if ($shade == 4)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   40%) }
    @if ($shade == 5)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   50%) }
    @if ($shade == 6)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   60%) }
    @if ($shade == 7)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   65%) }
    @if ($shade == 8)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   70%) }
    @if ($shade == 9)  { $rgb: mix($pro-hue-base-end, map-get($pro-hue, $name),   75%) }


    @return rgba($rgb, $alpha);
}

// @function color($name, $shade:0, $alpha:1) {
// $rgb: ();
//     @if ($shade == -9) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  75%) }
//     @if ($shade == -8) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  70%) }
//     @if ($shade == -7) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  65%) }
//     @if ($shade == -6) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  60%) }
//     @if ($shade == -5) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  50%) }
//     @if ($shade == -4) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  40%) }
//     @if ($shade == -3) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  30%) }
//     @if ($shade == -2) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  20%) }
//     @if ($shade == -1) { $rgb: mix($pro-hue-base-start, map-get($pro-grayscale, $name),  10%) }
//     @if ($shade == 0) { $rgb: map-get($pro-hue, $name) }
//     @if ($shade == 1)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   10%) }
//     @if ($shade == 2)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   20%) }
//     @if ($shade == 3)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   30%) }
//     @if ($shade == 4)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   40%) }
//     @if ($shade == 5)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   50%) }
//     @if ($shade == 6)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   60%) }
//     @if ($shade == 7)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   65%) }
//     @if ($shade == 8)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   70%) }
//     @if ($shade == 9)  { $rgb: mix($pro-hue-base-end, map-get($pro-grayscale, $name),   75%) }
//
//
//     @return rgba($rgb, $alpha);
// }
